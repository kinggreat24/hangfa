#ifndef IFLYTEK_H
#define IFLYTEK_H

#include <ros/ros.h>
#include <boost/thread/thread.hpp>
#include <boost/thread/mutex.hpp>

#include "hangfa_uart_platform/type.h"
#include "hangfa_uart_platform/uart.h"

#include <vector>
#include <boost/thread/thread.hpp>
#include <boost/thread/mutex.hpp>

//ROS
#include <geometry_msgs/Twist.h>
#include <std_msgs/Empty.h>
#include <std_msgs/Bool.h>
#include <sensor_msgs/Range.h>

//ROS Custom

//公共命令相关
#include "hangfa_uart_platform/HangfaCommand.h"
#include "hangfa_uart_platform/SingleParamSetting.h"
#include "hangfa_uart_platform/ErrorMessage.h"
#include "hangfa_uart_platform/DeviceVersion.h"
#include "hangfa_uart_platform/DeviceSerialNumber.h"
#include "hangfa_uart_platform/SaveConfigResult.h"


//运动控制模块
#include "hangfa_uart_platform/HandfaPlatformConfig.h"
#include "hangfa_uart_platform/MotorDriverStatus.h"
#include "hangfa_uart_platform/SetSonarAlarm.h"

//全场定位装置相关
#include "hangfa_uart_platform/HangfaOdom.h"
#include "hangfa_uart_platform/EncoderConfig.h"

//自动充电相关
#include "hangfa_uart_platform/AutomaticCharging.h"

//电源相关
#include "hangfa_uart_platform/PowerManageStatus.h"
#include "hangfa_uart_platform/PowerManage.h"
#include "hangfa_uart_platform/PowerInfo.h"
#include "hangfa_uart_platform/PowerConfig.h"


//超声波模块
#include "hangfa_uart_platform/UltrasonicConfig.h"



namespace hangfa_platform{

class HangfaPlatfromUartDriver
{
public:
	HangfaPlatfromUartDriver(const ros::NodeHandle &nh,const int controller_type,const int max_speed);
	~HangfaPlatfromUartDriver();

	static void onMessageProcess(const char* buf, const int len);
	static bool cksCheck(const char* inbuffer,const int length);
	static void uartRec(const void *msg, unsigned int msglen, void *user_data);

	
protected:
	void onTwistCb(const geometry_msgs::Twist::ConstPtr &msg);
	void onCmdvelTimerEvent(const ros::TimerEvent &e);
	void onHangfaCommandCb(const hangfa_uart_platform::HangfaCommand::ConstPtr &msg);
	void onSingleParamSettingCb(const hangfa_uart_platform::SingleParamSetting::ConstPtr &msg);
	void onAutoChargingCb(const std_msgs::Bool::ConstPtr& msg);
        void onPowerManageCb(const hangfa_uart_platform::PowerManage::ConstPtr& msg);
	void onSonarAlarmCb(const hangfa_uart_platform::SetSonarAlarm::ConstPtr& msg);//设置超声报警
public:
	static UART_HANDLE m_uartHd;
private:
	ros::NodeHandle m_nh;
	ros::Subscriber m_subTwist,m_subCommand,m_subSingleParamSetting,m_subAutoCharging,m_subPowerManage,m_subSetSonarAlarm;

	
	static ros::Publisher m_pubPlatformConfigRes,m_pubErrorMessage,m_pubSonar[16],m_pubHangfaOdom,m_pubAutoCharging,m_pubPowerPcbStatus,m_pubPowerInfo,m_pubDeviceVersion,m_pubDeviceSerialNumber
,m_pubSaveConfig,m_pubMotorStatus,m_pubUltrasonicConfig,m_pubPlatformConfig,m_pubEncoderConfig,m_pubPowerConfig;

	static std::vector<char> m_bigbuf;        //存放接收到的数据的容器
	static int m_recvIndex;                   //接收到的数据的个数
	static int m_packageLength;

	int m_controllerType;
	int m_maxSpeed;
	static boost::mutex m_ttsStatusMutex;
	boost::shared_ptr<const geometry_msgs::Twist> m_current_cmdvel;
	ros::Timer m_cmdvel_timer;
};

}
#endif//IFLYTEK_H
